<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | whazzing around]]></title>
  <link href="http://whazzing.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://whazzing.com/"/>
  <updated>2013-12-01T17:11:12-06:00</updated>
  <id>http://whazzing.com/</id>
  <author>
    <name><![CDATA[Zachery Moneypenny]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fitbit Logins via Omniauth in Rails]]></title>
    <link href="http://whazzing.com/blog/2012/12/31/twitter-and-facebook-logins-via-omniauth-in-rails/"/>
    <updated>2012-12-31T10:54:00-06:00</updated>
    <id>http://whazzing.com/blog/2012/12/31/twitter-and-facebook-logins-via-omniauth-in-rails</id>
    <content type="html"><![CDATA[<p>It all started with a <a href="http://whazzing.com/blog/2012/03/20/becoming-the-finisher/#comment-743146618">comment</a> and a <a href="https://github.com/whazzmaster/fitgem-client/pull/4">pull request</a>.</p>

<p>I hadn&rsquo;t put time into maintaining my <a href="http://github.com/whazzmaster/fitgem">fitbit gem</a> <a href="http://www.fitbitclient.com">reference app</a> in quite awhile, and when I got a pull request to update it to the latest rails version I at first hesitated. After talking with some folks at <a href="http://www.bendyworks.com">my coworking space</a>, however, I decided to use some holiday downtime to pull in the changes and see if I could build on them to improve the quality of the site.</p>

<p>At first I was horrified to learn that I&rsquo;d stopped in mid-refactoring and I realized it was no wonder that Marcel (the submitter) reported he&rsquo;d had trouble getting tests to run. The first step was to delete whole directories of files and tests that no longer conformed to the current design of the site and ensure that the files that remained all contributed to that design.</p>

<p>I grabbed Marcel&rsquo;s pull request and got to work merging it in, at which point I looked at the login code and got embarrassed again. The truth is, the <a href="http://github.com/whazzmaster/fitgem">fitgem</a> library wasn&rsquo;t really built for managing oauth logins; instead it is optimized for using a token/secret for a given user to fetch data from the API. Yes, you could use fitgem to facilitate an oauth login process, but it certainly wasn&rsquo;t built with rails in mind and you had to roll your own controllers, views, and token and secret management.</p>

<p>The thing is, we already have a library that does that sort of thing: <a href="https://github.com/intridea/omniauth">OmniAuth</a> is a fantastic library for consuming <a href="https://github.com/intridea/omniauth/wiki/List-of-Strategies">pluggable login strategies</a>. I didn&rsquo;t have to search long before I found a <a href="https://github.com/tkgospodinov/omniauth-fitbit">fitbit strategy for omniauth</a>, and I set to work integrating it into the reference app.</p>

<p>Luckily I had been working a lot with OmniAuth lately, as I&rsquo;d implemented logins via Facebook and Twitter in another project just the week before. As always I leaned heavily on Ryan Bates' excellent <a href="http://railscasts.com">Railscasts</a> in getting up to speed on how <a href="http://railscasts.com/episodes/235-devise-and-omniauth-revised">OmniAuth worked with Devise</a>, and specifically with Twitter and <a href="http://railscasts.com/episodes/360-facebook-authentication">Facebook</a>. &lt;small-plug&gt;Railscasts Pro ($9/month) has been totally worth it for me. The Pro episodes go into a lot of depth and I&rsquo;ve learned a ton from them.&lt;/small-plug&gt;</p>

<p>Using the omniauth-fitbit gem I was able to delete a lot of now-redundant code for signing into/up for the application. There were, however, a few hiccups along the way that I wanted to note:</p>

<ul>
<li>Unlike Twitter and Facebook, logging into Fitbit via omniauth-fitbit doesn&rsquo;t allow devise to remember you from session to session, so you end having to re-login every time. I haven&rsquo;t yet figured out why but it may be something about how Fitbit conducts OAuth logins or it may be a configuration issue with omniauth-fitbit.</li>
<li>Logging in via Fitbit is fine and dandy, but if you want to use the token/secret for the logged-in user to fetch data from the API through the fitgem interface you&rsquo;ll need to store them. I just added fields to my user object:</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Add Oauth fields to User model <a href="https://github.com/whazzmaster/fitgem-client/blob/master/db/migrate/20121225193557_add_oauth_fields_to_users.rb">https://github.com/whazzmaster/fitgem-client/blob/master/db/migrate/20121225193557_add_oauth_fields_to_users.rb</a> _add_oauth_fields_to_users.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AddOauthFieldsToUsers</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;add_column :users, :oauth_token, :string</span>
</span><span class='line'><span class="sr">add_column :users, :oauth_secret, :string</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>I made some, ahem, unorthodox decisions that will have to refactored later. Chief among them was to add the FitbitClient to the User model:</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Access to FitbitClient through User model <a href="https://github.com/whazzmaster/fitgem-client/blob/master/app/models/user.rb">https://github.com/whazzmaster/fitgem-client/blob/master/app/models/user.rb</a> user.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # Elided for conciseness&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">linked?</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;oauth_token.present? &amp;amp;&amp;amp; oauth_secret.present?</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">fitbit_data</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;raise &quot;Account is not linked with a Fitbit account&quot; unless linked?</span>
</span><span class='line'><span class="sr">@client ||= Fitgem::Client.new(</span>
</span><span class='line'><span class="sr">            :consumer_key =&amp;gt; ENV[&quot;FITBIT_CONSUMER_KEY&quot;],</span>
</span><span class='line'><span class="sr">            :consumer_secret =&amp;gt; ENV[&quot;FITBIT_CONSUMER_SECRET&quot;],</span>
</span><span class='line'><span class="sr">            :token =&amp;gt; oauth_token,</span>
</span><span class='line'><span class="sr">            :secret =&amp;gt; oauth_secret,</span>
</span><span class='line'><span class="sr">            :user_id =&amp;gt; uid</span>
</span><span class='line'><span class="sr">          )</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">has_fitbit_data?</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;!@client.nil?</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># Elided for conciseness&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Eventually I should use a better pattern for this, but for now it&rsquo;s simplistic and anywhere you have a logged-in user in your application you will be able to call <code>fitbit_data</code> to get access to a configured FitbitClient instance.</p>

<p>And with that we&rsquo;re logging in via Fitbit and using the token/secret returned via omniuath-fitbit to fuel data retrieval from the Fitbit API through fitgem.</p>

<h3>List of Resources</h3>

<ul>
<li><a href="https://github.com/intridea/omniauth">OmniAuth</a>: Base authentication library</li>
<li><a href="https://github.com/tkgospodinov/omniauth-fitbit">omniauth-fitbit</a>: Fitbit-specific pluggable OmniAuth strategy</li>
<li><a href="http://github.com/whazzmaster/fitgem">fitgem</a>: Fitbit API library</li>
<li>Fitgem Reference Application (<a href="http://fitbitclient.com">app</a>|<a href="https://github.com/whazzmaster/fitgem-client">code</a>): An example application using omniauth-fitbit and fitgem</li>
<li><a href="http://dev.fitbit.com">Fitbit.com Developer Site</a>: Manage your developer keys for use with omniauth-fitbit and fitgem</li>
<li><a href="http://railscasts.com/episodes/235-devise-and-omniauth-revised">OmniAuth and Devise Railscast</a>: Integrating OmniAuth, Devise, and Twitter</li>
<li><a href="http://railscasts.com/episodes/360-facebook-authentication">Facebook Authentication with OmniAuth Railscast</a>: Setting up OmniAuth to work with Facebook</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Madison Ruby 2012]]></title>
    <link href="http://whazzing.com/blog/2012/08/27/madison-ruby-2012/"/>
    <updated>2012-08-27T17:04:00-05:00</updated>
    <id>http://whazzing.com/blog/2012/08/27/madison-ruby-2012</id>
    <content type="html"><![CDATA[<p><em>Please note</em>: Madison Ruby photos are now online at <a href="http://www.flickr.com/photos/whazzmaster/sets/72157631263044942/">Flickr</a>.</p>

<p><a href="http://www.flickr.com/photos/whazzmaster/7869056820/"><img class="right" src="http://farm9.staticflickr.com/8282/7869056820_aacfe79e4b_n.jpg" width="320" height="213" title="Greg Tarnoff at Madison Ruby 2012" ></a></p>

<p>I&rsquo;m working off the conference hangover. Email catchup, priotizing
tasks, etc. took up my time this morning, but I couldn&rsquo;t let Madison&rsquo;s
premier software conference fade without writing down some thoughts.</p>

<p>Firstly: much love to Jim and Jen Remsik as well as all the volunteers,
speakers, and organizers that helped make v2 of Madison Ruby even more
fun and entertaining than the inaugural conf last year. The diversity
of topics was again front and center: from team
dynamics, to talks about social justice, to funky drummers, to sources
of inspiration and the finer points of immigration law, the organizers
found a way to communicate technical content while advancing the
community in other areas as well.</p>

<p>First up was the <a href="http://madisonruby2012.sched.org/event/45828a0ad9ccd45642acbeeefabd9aa1">Design Eye for the Dev Guy or Gal</a> workshop on Thursday.  I misunderstood the focus, which is mostly because I signed up for it before a comprehensive description had been published.  <a href="https://twitter.com/pengwynn">Wynn Netherland</a> did a great job laying out the finer points of HTML5, Sass, Compass, and more.  I had expected the workshop to range more towards the philosophy of web design, rather than a technical how-to around using the tools.  Even so, however, I learned a lot about Compass.  My previous aversion stemmed from when compass and blueprint were sold as a boxed set, but I&rsquo;m definitely going to check it out on the next major project.</p>

<p>Highlight: In a discussion about the ubiquity of Twitter Bootstrap Wynn
asked how many folks were using Octopress for their dev blog, and then
added, &ldquo;You know, you don&rsquo;t HAVE to use the default style&hellip; you can add
some color in there.&rdquo; <em>sheepish grin</em></p>

<p>I may have had a little too much fun at the Github-sponsored drinkup on
Thursday evening; waking up and riding my bike downtown at 7am was a
monumental task.</p>

<p>Friday&rsquo;s talks were very interesting, especially the <a href="http://madisonruby2012.sched.org/event/b50ba5ffa1585b870253b928b153d74f"><strong>Anti-Opression 101</strong></a>
talk by Lindsey Bieda and Steve Klabnik.  Though I had seen it a
previous <a href="http://www.meetup.com/Mad-Railers/">Mad-Railers meetup</a> I also enjoyed <a href="https://twitter.com/rathboma">Matthew Rathbone</a>&rsquo;s talk
about how <a href="http://foursquare.com">Foursquare</a> uses <a href="http://hadoop.apache.org/">Hadoop</a> for its various data processing needs. Unfortunately, I had to take off early on Friday and missed some of the afternoon talks, including what I heard was a <a href="https://twitter.com/#!/search/?q=clyde+%23madisonruby&amp;src=typd">fantastic 45 minutes</a> with <a href="http://en.wikipedia.org/wiki/Clyde_Stubblefield">Clyde Stubblefield</a>.</p>

<p>Saturday I was feeling a lot better, and hit the Farmer&rsquo;s Market early
for coffee and pastries.  I&rsquo;m embarassed to say that I hadn&rsquo;t looked
at the schedule closely enough and so it was an extremely pleasant surprise
that the first talk was by Paolo Perrotta,  author of the best Ruby book
in existence: <a href="http://pragprog.com/book/ppmetr/metaprogramming-ruby">Metaprogramming Ruby</a>.
It was a great talk about ghosts, fake ghosts, and all manner of
potential problems one will encounter when using the metaprogramming
aspect of the Ruby language.</p>

<p>Later in the day were several successive talks that excited the hell out
of me, but none moreso than <a href="https://twitter.com/rubybuddha">Leon Gersing</a>&rsquo;s talk
on the Weird in programming.  Difficult to describe so I&rsquo;ll just say
that if he&rsquo;s speaking at a conference make sure you get your ass to that
talk and be prepared to enjoy it.</p>

<p>The <strong>Teaching Rails</strong> panel discussion late in the day on Saturday was
interesting.  I almost didn&rsquo;t attend because I thought it was going to
be about how best to teach Rails to new folks.  Instead it was more
about the <em>business</em> of teaching Rails and how each of the four
panelists approached it.  Ultimately the panel dovetailed into a talk
about certification, payscales, and other highly interesting topics to
any software developer.  I felt that <a href="https://twitter.com/j3">Jeff Casimir</a>&rsquo;s innocent
suggestion of some kind of certification was not considered for a single
second before being shouted down by everyone else on the panel and in
attendance.  In particular, I think his idea has merit but the operational reality is
bad, which is why everyone just said &ldquo;NO CERTIFICATION&rdquo; when I think
what is needed is a
discussion about what certification is trying to accomplish and how it
can be done without turning into a paradise for grifters and dummies.</p>

<p>This was just a taste of the goings-on at Madison Ruby 2012. Others will
likely have a fuller rundown of the events so I just hit what were, to
me, the highlights.  If you&rsquo;re down on the Ruby tip I highly suggest you
try to get to Madison for next year&rsquo;s conference.  You can already hit
the <a href="http://2013.madisonruby.org/">Very Early Bird registration page</a> and get a ticket for the low,
low price of $199.  Do it, and come hang out with me next year!</p>
]]></content>
  </entry>
  
</feed>
